import psi4

raw_data = """
       BMK,  -76.3467785966000037
  MGGA_MS1,  -76.3862847739000017
     B1LYP,  -76.3535264398000066
    HCTH93,  -76.3690726046999941
     MPW1K,  -76.3552293636000030
 MGGA_MS2h,  -76.3869717052999988
     TPSSh,  -76.3808997507999976
      PBE0,  -76.3004989885999976
 LRC-wPBEh,  -76.3099424376000002
    B3PW91,  -76.3571064930000034
      wB97,  -76.3673106896000036
       BOP,  -76.3668799865999972
     B3P86,  -76.4016411790999967
       M11,  -76.3543894538999979
      SCAN,  -76.3522497757000025
       GAM,  -76.3503638435999932
    M08-HX,  -76.3491939590000044
     wB97X,  -76.3624999407000047
  wB97X-D3,  -76.3623321139999973
  B5050LYP,  -76.3332203819999933
    t-HCTH,  -76.3696114174999963
       M06,  -76.3505221948999946
     SOGGA,  -75.9787679797999971
      BLYP,  -76.3664511366000056
     X3LYP,  -76.3549666532999964
    M05-2X,  -76.3677366188999969
     O3LYP,  -76.3591519817999966
 MGGA_MVSh,  -76.3353050983999992
     B1B95,  -76.3535218972999985
       M05,  -76.3485782220000004
      PKZB,  -76.2406589717000003
     B97-3,  -76.3648903124999947
     B97-D,  -76.3454776499000047
      TPSS,  -76.3892897844000061
   SOGGA11,  -76.3720443428999971
      BB1K,  -76.3467152802000015
     SCAN0,  -76.3379029626999994
    M06-2X,  -76.3484434676000063
     PBEOP,  -76.3127794731999956
  MGGA_MS2,  -76.3944046976999971
    MN12-L,  -76.3108543350000019
    N12-SX,  -76.3348361572000016
      dlDF,  -76.8411033690999972
   LRC-BOP,  -76.2292395779000032
      BP86,  -76.3866054652000059
   HCTH120,  -76.3758099710999971
      EDF1,  -76.3977353147000002
    M08-SO,  -76.3326735788999997
  MGGA_MVS,  -76.3421991937999991
   revPBE0,  -76.3463887599999964
     M06-L,  -76.3766412209999999
   t-HCTHh,  -76.3687407290999971
   HCTH407,  -76.3749332321999930
 CAM-B3LYP,  -76.3552395513000022
  MPW1PW91,  -76.3632704638999940
   MPW1B95,  -76.3499762600999929
   HCTH147,  -76.3796800707000045
    M06-HF,  -76.3434823813000065
    B3LYP5,  -76.3479655987000001
      PW91,  -76.3566898132999938
    wM05-D,  -76.3552889303999933
     B3LYP,  -76.3850629237000049
       PBE,  -76.2994454149000063
    MPWB1K,  -76.3440612003000041
     B97-K,  -76.3525019631999982
       B97,  -76.3580555827000040
    B1PW91,  -76.3655336964999947
      VSXC,  -76.4029233123000040
    BHHLYP,  -76.3412697403999942
   BP86VWN,  -76.3908805485999949
      EDF2,  -76.3447647211999936
     B97-2,  -76.3583905196999950
   wM06-D3,  -76.3595346591999942
   MPW1PBE,  -76.3392282126999930
     B97-1,  -76.3597077255000016
     M11-L,  -76.3618412049000028
  LRC-wPBE,  -76.3232922044000048
     PWB6K,  -76.4078451296000054
    PW6B95,  -76.4628530150999950
    MN15-L,  -76.3001793932999988
  revTPSSh,  -76.3534596164000021
 SOGGA11-X,  -76.3569679431000026
   MN12-SX,  -76.3286481310999960
   wB97X-D,  -76.3616399546999958
   MPW1LYP,  -76.3513127878999995
     PBE50,  -76.3022385245999999
  MGGA_MS0,  -76.3991111682999957
       N12,  -76.3300096080999992
""".splitlines()

qchem_data = {}
for n, l in enumerate(raw_data):
    if not len(l): continue
    s, e = l.split(',')
    s = s.strip().upper()
    qchem_data[s] = float(e)

psi_data = {'wblyp': -76.3825262028083, 'svwn': -76.01452450629559, 'b97-0':
-76.35806217660348, 'b97-1': -76.35971389422123, 'b97-2': -76.3583977125692,
'pbe0': -76.30050128362014, 'pw91': -76.3565672871516, 'b2plyp':
-76.29245491066388, 'bp86': -76.38654294632472, 'wpbe2': -76.29220261052656,
'wpbe0': -76.31862941307556, 'wb97x': -76.36530303256407, 'sogga':
-75.97862074697434, 'wsvwn': -76.14201931003304, 'hcth120': -76.37582142613623,
'ft97': float('NaN'), 'wpbe': -76.33419490671916, 'wb97': -76.36737258172461, 'hcth147':
-76.37969122520059, 'dldf+d': -76.84110282525018, 'blyp': -76.36645993768678,
'hcth': -76.36908457666645, 'hcth407': -76.37494441125874, 'wb97x-d':
-76.36166004385153, 'b86bpbe': -76.36414509170982, 'm05': -76.34856555284622,
'dldf': -76.84110282525016, 'b97-d': -76.34549159283519, 'pw86pbe':
-76.42095771366442, 'm05-2x': -76.36772387978453, 'wpbesol': -76.0621570060994,
'pbe': -76.29945413106864, 'hf_x': -75.98014193516957, 'pbe0-2':
-76.21332533493145, 'wpbesol0': -76.1033355799836, 'wpbe_c':
-67.60822454944358, 'dldf+d09': -76.84110282525018,
'b3lyp5': -76.34796919664903, 'b3lyp': -76.38506652122132}
psi_data = {k.upper() : v for k, v in psi_data.items()}


mol = psi4.geometry("""
0 1
O
H 1 1.0
H 1 1.0 2 104.5
""")
psi4.set_options({"GUESS": "CORE",
                  "BASIS": "6-31G",
                  "dft_spherical_points": 1202,
                  "dft_radial_points": 400,
                  "dft_nuclear_scheme": "NAIVE"})
psi4.core.set_output_file("output.dat", False)

keys = list(set(list(psi_data)) | set(list(qchem_data))) 
#keys = [x for x in keys if "LYP" in x]
keys = ["WPBE"]
keys.sort()

print("           Functional:           libxc :      rob    qchem")


for key in keys:
   
    energy = 0 
    try:
        energy = psi4.energy(key, molecule=mol)
    except:
        #print("Functional %s not found.. skipping" % key)
        continue


    qchem_energy = float('NaN')
    psi_energy = float('NaN')
    if key in list(qchem_data):
        qchem_energy = qchem_data[key]
    if key in list(psi_data):
        psi_energy = psi_data[key]

    psi_diff = abs(energy - psi_energy)
    qchem_diff = abs(energy - qchem_energy)

    spot = ""
    if (psi_diff > 1.e-6) or (qchem_diff > 1.e-4):
        spot = "*"

    qchem_energy = float('NaN')
    print("Comparison %10s: %16.10f : %8.2e %8.2e %s" % (key, energy, psi_diff, qchem_diff, spot))


